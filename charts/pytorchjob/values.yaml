# Default values for pytorchjob.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

useHostNetwork: false
useHostPID: true
useHostIPC: true
gpuCount: 0 # user define

# rsync image
rsyncImage: registry.cn-zhangjiakou.aliyuncs.com/tensorflow-samples/rsync
# git sync image
gitImage: registry.cn-zhangjiakou.aliyuncs.com/tensorflow-samples/git-sync:v3.1.1

shmSize: 2Gi
privileged: false

useTensorboard: false
tensorboardImage: registry.cn-zhangjiakou.aliyuncs.com/tensorflow-samples/tensorflow:1.5.0-devel
tensorboardImagePullpolicy: Always
tensorboardServiceType: NodePort

# Number of retries before marking this job as failed.
# BackoffLimit
retry: 0

tensorboardResources: {}
# tensorboardResources:
#   limits:
#     cpu: 500m
#     memory: 500Mi
#   requests:
#     cpu: 500m
#     memory: 500Mi


annotations: {}
# annotations:

# enable RDMA support
enableRDMA: false

ingress: false

# enable PodSecurityContext
# In the future, this flag should be protected separately, in case of arena admin and users are not the same people
enablePodSecurityContext: false

# enable priorityClassName
priorityClassName: ""

# Defines the policy for cleaning up pods after the PyTorchJob completes.
cleanPodPolicy: "None"

# Specifies the duration (in seconds) since startTime during which the job can remain active
# before it is terminated. Must be a positive integer.
# This setting applies only to pods where restartPolicy is OnFailure or Always.
# +optional
activeDeadlineSeconds:

# Defines the TTL for cleaning up finished PyTorchJobs (temporary
# before Kubernetes adds the cleanup controller).
# It may take extra ReconcilePeriod seconds for the cleanup, since
# reconcile gets called periodically.
# Defaults to infinite.
ttlSecondsAfterFinished:

# rank0
master: 1

# rankN, is local training when N = 0
workers: 0

# image addr of worker init container for init-pytorch
workerInitPytorchImage: alpine:3.10

imagePullPolicy: Always